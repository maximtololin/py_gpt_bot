from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes

from credentials import ChatGPT_TOKEN
from gpt import ChatGptService
from credentials import BOT_TOKEN
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler

dialog = Dialog()
dialog.mode = None
chat_gpt = ChatGptService(ChatGPT_TOKEN)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'food': '–£–∑–Ω–∞–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞ üçñ',
        'enjoy': '–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è üíª'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç ChatGPT
    """
    dialog.mode = 'gpt'
    prompt = load_prompt('gpt')
    message = load_message('gpt')

    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    """
    prompt = load_prompt('random')
    message = load_message('random')

    await send_image(update, context, 'random')
    answer = await chat_gpt.send_question(prompt, '')
    message = await send_text_buttons(update, context, answer, {
        'more_facts': '–†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ!',
        'enough_facts': '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤  –º–µ–Ω—é'
    })


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_question = update.message.text
    thinking_message = await send_text(update, context, '–î—É–º–∞—é...')
    answer = await chat_gpt.add_message(user_question)
    await thinking_message.edit_text(answer)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip().lower()
    if user_text == '—Å—Ç–æ–ø':
        dialog.mode = 'main'
        await start(update, context)
    elif dialog.mode in ['cobain', 'hawking', 'nietzsche', 'queen', 'tolkien']:
        user_question = update.message.text
        thinking_message = await send_text(update, context, '–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
        answer = await chat_gpt.add_message(user_question)
        await thinking_message.edit_text(answer)
    elif dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'food':
        await handle_food_query(update, context)
    elif dialog.mode in ['movies', 'books']:
        await handle_preferences_query(update, context)
    else:
        await start(update, context)


async def console_print(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å
    """
    text = update.message.text
    print(text)


async def echo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç
    """
    text = update.message.text
    await send_text(update, context, text)


async def random_fact_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'more_facts':
        await random_fact(update, context)
    else:
        dialog.mode = 'main'
        await start(update, context)


async def more_facts(update, context):
    await random_fact(update, context)


async def character_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE, character: str):
    """
    –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
    """
    dialog.mode = character

    prompt = load_prompt(f"talk_{character}")
    chat_gpt.set_prompt(prompt)

    await send_image(update, context, f"talk_{character}")
    message = f"–í—ã –≥–æ–≤–æ—Ä–∏—Ç–µ —Å {character.capitalize()}! –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ: —Å—Ç–æ–ø"
    await send_text(update, context, message)


async def talk_with_famous_people(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    await send_text_buttons(update, context, '–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:', {
        'cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥',
        'nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II',
        'tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–Ω'
    })


async def famous_people_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –∫–Ω–æ–ø–æ–∫,
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –∏ –∑–∞–≥—Ä—É–∂–∞—è –¥–∏–∞–ª–æ–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º.
    """
    query = update.callback_query
    await query.answer()

    character = query.data
    await character_dialog(update, context, character)


"""
=======================================================================
–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–±–µ–¥–∏—Ç—å ChatGPT, –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –∫–≤–∏–∑–µ
=======================================================================
"""


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–≤–∏–∑–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–æ–π "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ".
    """
    dialog.mode = 'quiz'
    await send_image(update, context, 'quiz')

    await send_text_buttons(update, context, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞:', {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'
    })

    context.user_data['quiz_score'] = 0


async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ". –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–≤–∏–∑ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    """
    query = update.callback_query
    await query.answer()

    prompt = load_prompt('quiz')
    chat_gpt.set_prompt(prompt)

    question = await chat_gpt.send_question("quiz_prog", '')
    await send_text(update, context, question)


async def quiz_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    user_answer = update.message.text

    result = await chat_gpt.send_question("quiz_prog", user_answer)

    if result.strip().lower() == "–ø—Ä–∞–≤–∏–ª—å–Ω–æ!":
        context.user_data['quiz_score'] += 1
        response = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à —Å—á—ë—Ç: {context.user_data['quiz_score']}"
    else:
        correct_answer = result.split('-')[1].strip()
        response = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {correct_answer}. –í–∞—à —Å—á—ë—Ç: {context.user_data['quiz_score']}"

    await send_text_buttons(update, context, response, {
        'quiz_more': '–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å'
    })


async def quiz_more_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.
    """
    query = update.callback_query
    await query.answer()

    question = await chat_gpt.send_question("quiz_prog", '')
    await send_text(update, context, question)


async def food_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∏ –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç.
    """
    dialog.mode = 'food'
    prompt = load_prompt('food')
    chat_gpt.set_prompt(prompt)

    await send_image(update, context, 'food')
    message = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å!"
    await send_text(update, context, message)


async def handle_food_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞.
    """
    if dialog.mode != 'food':
        return

    user_input = update.message.text.strip()

    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.")
        return

    prompt_text = load_prompt('food')
    recipe_response = await chat_gpt.send_question(prompt_text, f"–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {user_input}")

    await update.message.reply_text(recipe_response)


async def enjoy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–§–∏–ª—å–º—ã –∏–ª–∏ –ö–Ω–∏–≥–∏).
    """
    dialog.mode = 'enjoy'

    await send_text_buttons(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", {
        'movies': '–§–∏–ª—å–º—ã üé¨',
        'books': '–ö–Ω–∏–≥–∏ üìö'
    })


async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –§–∏–ª—å–º—ã –∏–ª–∏ –ö–Ω–∏–≥–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()

    category = query.data
    dialog.mode = category

    if category == 'movies':
        message = "–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–æ–≤ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è? –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–º–µ–¥–∏—è, —Ç—Ä–∏–ª–ª–µ—Ä, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞."
    elif category == 'books':
        message = "–ï—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä –∏–ª–∏ –∂–∞–Ω—Ä –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è? –ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤, –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π."

    await send_text(update, context, message)


async def handle_preferences_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —É ChatGPT.
    """
    if dialog.mode not in ['movies', 'books']:
        return

    preferences = update.message.text.strip()

    if dialog.mode == 'movies':
        prompt = load_prompt('movies_recommendations')
        request_text = f"–†–µ–∫–æ–º–µ–Ω–¥—É–π —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ: {preferences}"
    elif dialog.mode == 'books':
        prompt = load_prompt('books_recommendations')
        request_text = f"–†–µ–∫–æ–º–µ–Ω–¥—É–π –∫–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ –∏–ª–∏ –ø–æ –∞–≤—Ç–æ—Ä—É: {preferences}"

    chat_gpt.set_prompt(prompt)
    recommendations = await chat_gpt.send_question(prompt, request_text)

    await update.message.reply_text(recommendations)


app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random_fact))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk_with_famous_people))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('food', food_recipe))
app.add_handler(CommandHandler('enjoy', enjoy))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
app.add_handler(MessageHandler(filters.TEXT, console_print), group=0)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler), group=1)
app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^(?!/).*$'), quiz_answer_handler))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^(?!/).*$'), handle_preferences_query))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(random_fact_button, pattern='^more_facts.*'))
app.add_handler(CallbackQueryHandler(random_fact_button, pattern='^enough_facts.*'))
app.add_handler(CallbackQueryHandler(famous_people_button, pattern='^(cobain|hawking|nietzsche|queen|tolkien)$'))
app.add_handler(CallbackQueryHandler(start_quiz, pattern='^quiz_prog$'))
app.add_handler(CallbackQueryHandler(quiz_more_question, pattern='^quiz_more$'))
app.add_handler(CallbackQueryHandler(handle_category_selection, pattern='^(movies|books)$'))

app.add_handler(CallbackQueryHandler(default_callback_handler))

app.run_polling()
